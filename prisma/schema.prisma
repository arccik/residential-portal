// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "prisma-zod-generator"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String         @id @default(cuid())
    name             String?
    email            String?        @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    Announcement     Announcement[]
    AprovedResidents Resident[]
    KeyManagement     KeyManagement[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Announcement {
    id           String    @id @default(cuid())
    subject      String
    text         String
    startDate    DateTime?
    endDate      DateTime?
    image        String?
    sendingEmail Boolean   @default(false)
    archived     Boolean   @default(false)
    filter       String?
    user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}

model Resident {
    id             String          @id @default(cuid())
    title          String
    firstName      String
    lastName       String
    email          String
    phoneNumber    String
    altPhoneNumer  String?
    group          ResidentsGroup?
    property       Property        @relation(fields: [propertyId], references: [id])
    propertyId     String
    approvedByUser User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    password       String
}

enum ResidentsGroup {
    OwnerAbsents
    OwnerOccupier
    Tenant
}

model KeyManagement {
    id               String            @id @default(cuid())
    name             String
    authorizedBy     User              @relation(fields: [userId], references: [id])
    userId           String
    property         Property          @relation(fields: [propertyId], references: [id])
    propertyId       String
    company          String?
    phoneNumber      String?
    type             CollectorType?
    outDays          Int?
    periodic         KeyOutForPeriods?
    expireDate       DateTime?
    notes            String?
    emailKeyActivity Boolean           @default(true)
    signature        String?
}

enum KeyOutForPeriods {
    hours
    days
    weeks
}

enum CollectorType {
    oneTime
    regular
}

model Property {
    id             String         @id @default(cuid())
    name           String
    Resident       Resident[]
    KeyManagementId KeyManagement[]
}
